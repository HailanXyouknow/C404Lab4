Question 1: What is the link to your github repository for this lab?
    https://github.com/HailanXyouknow/C404Lab4

Question 2: After starting a brand new Django application and running the runserver command, what does the browser show you?
   Flying rocketship with the message "The install worked successfully! Congratulations!"

Question 3: After creating the first view within polls, what does the browser show you when navigating to / and to /polls respectively?
    / is 404
    /polls the string "Hello, world. You're at the polls index." which is from the index function at mysite/polls/views.py

Question 4: What is a Django migration and why do we need them?
    To set and modify database schemas

Question 5: What do you see after you log into the Django adminstration site? 
From a high level, how do you get custom models to appear in the Django admin page?

    I see a "AUTHENTICATION AND AUTHORIZATION" section and as "POLLS" section (the latter contains the two models we defined earlier)
    Custom models can appear on the Django admin page because we imported them in admin.py

Question 6: What do you see when you go to /polls/38/ in your browser?
What about /polls/38/results and /polls/38/vote? What happens when you donâ€™t put a number,
and instead use a string? How would you modify the urls.py file to allow arbitrary alphabetic characters?

    Going to /polls/38/ will show the message "You're looking at question 38."
    Going to /polls/38/results will show the message "You're looking at the results of question 38."
    Going to /polls/38/vote will show the message "You're voting on question 38."
 
    If we use a string instead of a number, it will show 404

    It might be possible to allow arbitrary alphabetic characters by turning '<int:question_id>' to '<char:question_id>'

Question 7: Why is it a bad idea to hardcode urls into the templates?
    
    We already specified the urls in urls.py, so the template can get the urls there.
    Thus, to avoid repetitions (aka keeping our code D.R.Y), we should not hardcode urls.

Question 8: What are the benefits of using Django's generic views over writing views 'the hard way'?
When should you use a generic view and when shouldn't you use a generic view?

    Benefits: it's faster, cleaner and more convenient for what we are doing, 
    which is basically showing an HTML page with a model's information. 
    However, if there turns out to be a specific situation that is unaccounted for by Django,
    so we have no where to inherit from, then we will need to code it ourselves.